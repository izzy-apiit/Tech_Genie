'use strict';

var GetIntrinsic = require('get-intrinsic');
var callBound = require('call-bound');
var inspect = require('object-inspect');

var $TypeError = require('es-errors/type');
var $WeakMap = GetIntrinsic('%WeakMap%', true);

/** @type {<K, V>(thisArg: WeakMap<K, V>, key: K) => V} */
var $wmGet = callBound('WeakMap.prototype.get', true);
/** @type {<K, V>(thisArg: WeakMap<K, V>, key: K, value: V) => void} */
var $wmSet = callBound('WeakMap.prototype.set', true);
/** @type {<K, V>(thisArg: WeakMap<K, V>, key: K) => boolean} */
var $wmHas = callBound('WeakMap.prototype.has', true);
/** @type {<K, V>(thisArg: WeakMap<K, V>, key: K) => boolean} */
var $wmDelete = callBound('WeakMap.prototype.delete', true);

/** @type {import('.')} */
module.exports = !!$WeakMap && /** @type {Exclude<import('.'), false>} */ function getSideChannelWeakMap() {
    /** @typedef {ReturnType<typeof getSideChannelWeakMap>} Channel */
    /** @typedef {Parameters<Channel['get']>[0]} K */
    /** @typedef {Parameters<Channel['set']>[1]} V */

    /** @type {WeakMap<K, V> | undefined} */ var $wm;

    /** @type {Channel} */
    var channel = {
        assert: function (key) {
            if (!channel.has(key)) {
                throw new $TypeError('Side channel does not contain ' + inspect(key));
            }
        },
        'delete': function (key) {
            return !!$wm && $wmDelete($wm, key);
        },
        get: function (key) {
            return $wm && $wmGet($wm, key);
        },
        has: function (key) {
            return !!$wm && $wmHas($wm, key);
        },
        set: function (key, value) {
            if (!$wm) {
                // @ts-expect-error TS can't handle narrowing a variable inside a closure
                $wm = new $WeakMap();
            }
            $wmSet($wm, key, value);
        }
    };

    // @ts-expect-error TODO: figure out why TS is erroring here
    return channel;
};

